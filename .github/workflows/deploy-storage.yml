name: Deploy to Azure Static Website

on:
  push:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: storage-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
      AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
      AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
      AZURE_STORAGE_SAS_TOKEN: ${{ secrets.AZURE_STORAGE_SAS_TOKEN }}  # If using SAS, store WITHOUT leading '?'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Repo snapshot artifact ----
      - name: Create repo snapshot artifact
        shell: bash
        run: |
          set -e
          mkdir -p .artifacts
          # Commit/Tree manifests
          git rev-parse HEAD > .artifacts/COMMIT.txt || echo "unknown" > .artifacts/COMMIT.txt
          git ls-tree -r --name-only HEAD | sort > .artifacts/TREE.txt || touch .artifacts/TREE.txt
          # Make a zip; fall back to zipping the working tree if git archive fails
          ZIP_NAME="repo-${GITHUB_SHA:-head}.zip"
          git archive -o ".artifacts/${ZIP_NAME}" HEAD || zip -yr ".artifacts/${ZIP_NAME}" .
          # Minimal STATE.md (no Node required)
          {
            echo "# Repo STATE"
            echo
            echo "- Commit: ${GITHUB_SHA:-unknown}"
            echo "- Date: $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
            echo
            echo "## Key files"
            for f in package.json next.config.js scripts/generateMedia.cjs pages/media.jsx app/media/page.jsx styles/globals.css app/globals.css .github/workflows/deploy-storage.yml public/site-data/videos.embeds.json; do
              if [ -f "$f" ]; then
                printf -- "- %s (%s)\n" "$f" "$(sha256sum "$f" | cut -d' ' -f1)"
              else
                printf -- "- %s (missing)\n" "$f"
              fi
            done
          } > .artifacts/STATE.md
          echo "Created:"
          ls -al .artifacts

      - name: Upload repo snapshot artifact
        uses: actions/upload-artifact@v4
        with:
          name: repo-snapshot-${{ github.sha }}
          path: |
            .artifacts/COMMIT.txt
            .artifacts/TREE.txt
            .artifacts/STATE.md
            .artifacts/repo-${{ github.sha }}.zip
          if-no-files-found: error
          retention-days: 45

      - name: Setup Node.js
  uses: actions/setup-node@v4
  with:
    node-version: 18
    cache: 'npm'                 # uses package-lock.json to key cache
    cache-dependency-path: package-lock.json


      - name: Install dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          else
            npm install
          fi

      # ---- Generate site-data BEFORE build ----
      - name: Generate media JSON
        run: |
          if [ -f scripts/generateMedia.cjs ]; then
            node scripts/generateMedia.cjs
          else
            echo "No generator script found - skipping."
          fi

- name: Restore Next.js build cache
  uses: actions/cache@v4
  with:
    path: .next/cache
    key: ${{ runner.os }}-next-${{ hashFiles('package-lock.json') }}-${{ hashFiles('next.config.js') }}
    restore-keys: |
      ${{ runner.os }}-next-${{ hashFiles('package-lock.json') }}-
      ${{ runner.os }}-next-

      # Next.js static export should create ./out (next.config.js: output:'export')
      - name: Build (Next.js static export)
        run: npm run build

      - name: Verify build output
        run: test -d out

      # ---- Deploy to Azure Static Website container ($web) ----
      - name: Upload to Azure Static Website (no azcopy)
        uses: azure/cli@v2
        with:
          azcliversion: "2.61.0"
          inlineScript: |
            set -euo pipefail
            export AZURE_STORAGE_USE_AZCOPY=false
            az storage blob service-properties update \
              --static-website \
              --index-document index.html \
              --404-document 404.html || true

            az storage blob upload-batch \
              --destination '$web' \
              --source ./out \
              --overwrite true

            tmp_local=$(mktemp)
            tmp_remote=$(mktemp)
            (cd out && find . -type f -print | sed 's#^\./##' | sort) > "$tmp_local"
            az storage blob list -c '$web' --query "[].name" -o tsv | sort > "$tmp_remote" || true
            comm -23 "$tmp_remote" "$tmp_local" | while IFS= read -r blob; do
              [ -z "$blob" ] && continue
              echo "Deleting obsolete blob: $blob"
              az storage blob delete -c '$web' -n "$blob" --only-show-errors || true
            done
            rm -f "$tmp_local" "$tmp_remote"

            fix_type () {
              local pattern="$1"; local ctype="$2"
              find out -type f -name "$pattern" -print0 | while IFS= read -r -d '' f; do
                blob="${f#out/}"
                echo "Setting Content-Type '$ctype' on: $blob"
                az storage blob update -c '$web' -n "$blob" --content-type "$ctype" --only-show-errors || true
              done
            }
            fix_type "*.mp4"  "video/mp4"
            fix_type "*.m4v"  "video/mp4"
            fix_type "*.webm" "video/webm"
            fix_type "*.ogv"  "video/ogg"
            fix_type "*.mp3"  "audio/mpeg"
            fix_type "*.m4a"  "audio/mp4"
            fix_type "*.ogg"  "audio/ogg"
            fix_type "*.opus" "audio/opus"
