name: Deploy to Azure Static Website

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: azure-static-website
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          # don't enable npm caching here; it requires a lockfile and will fail if missing

      # Optional build cache; safe even without a lockfile
      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-next-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-next-

      - name: Install dependencies (works with or without lockfile)
        run: |
          if [ -f package-lock.json ]; then
            echo "Using npm ci (lockfile present)"
            npm ci
          else
            echo "No lockfile found — using npm install"
            npm install
          fi

      # Run media generator explicitly (okay if you also have "prebuild")
      - name: Generate media JSON (audio/videos)
        run: |
          if [ -f scripts/generateMedia.cjs ]; then
            node scripts/generateMedia.cjs
          else
            echo "scripts/generateMedia.cjs not found — skipping generator."
          fi

      # With next.config.js { output: 'export' }, "npm run build" produces ./out
      - name: Build (Next.js static export via output:'export')
        run: npm run build

      - name: Verify build output exists
        run: |
          test -d out && echo "✅ out/ exists" || (echo "❌ out/ not found"; exit 1)

      # Single azure/cli step with inlineScript (required by the action)
      - name: Upload to Azure Static Website
        uses: azure/cli@v2
        env:
          AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}
        with:
          azcliversion: 2.61.0
          inlineScript: |
            set -e
            echo "Enabling static website..."
            az storage blob service-properties update \
              --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
              --static-website \
              --index-document index.html \
              --404-document 404.html

            echo "Syncing ./out to \$web..."
            az storage blob sync \
              --connection-string "$AZURE_STORAGE_CONNECTION_STRING" \
              -c '$web' \
              -s ./out \
              --delete

            # Optional: normalize content-types if needed
            # echo "Normalizing common content-types..."
            # az storage blob list --connection-string "$AZURE_STORAGE_CONNECTION_STRING" -c '$web' --prefix audio/ --output tsv --query "[].name" | \
            #   xargs -I {} az storage blob update --connection-string "$AZURE_STORAGE_CONNECTION_STRING" -c '$web' -n "{}" --content-type "audio/mpeg" || true
            # az storage blob list --connection-string "$AZURE_STORAGE_CONNECTION_STRING" -c '$web' --prefix video/ --output tsv --query "[].name" | \
            #   xargs -I {} az storage blob update --connection-string "$AZURE_STORAGE_CONNECTION_STRING" -c '$web' -n "{}" --content-type "video/mp4" || true
